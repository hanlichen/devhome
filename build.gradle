apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath (
                [group: "org.flywaydb", name: "flyway-gradle-plugin", version: "3.2.1"],
        )
    }

    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}

apply plugin: 'org.flywaydb.flyway'

ext {
    hibernateVersion = '4.3.9.Final'
    springVersion = '4.1.6.RELEASE'
    jerseyVersion = '2.19'
    jettyVersion = '9.2.10.v20150310'
    c3p0Version = '0.9.5'
    log4jVersion = '1.2.17'
    slf4jVersion = '1.7.12'
    guavaVersion = '18.0'
    jedisVersion = '2.7.2'
    junitVersion = '4.12'
    mysqlConnectorVersion = '5.1.34'
    flywayVersion = '3.2'
    orikaVersion = '1.4.6'
    quartzVersion = '2.2.1'
    mockitoVersion = '1.10.19'
    powermockVersion = '1.10.19'
    jodaTimeVersion = '2.2'
    jacksonVersion = '2.6.0'
}

dependencies {
    compile(group: 'org.glassfish.jersey.ext', name: 'jersey-spring3', version: jerseyVersion) {
        exclude module: 'junit'
    }

    compile(
        [group: 'joda-time', name: 'joda-time', version: jodaTimeVersion],

        [group: 'org.glassfish.jersey.core', name: 'jersey-server', version: jerseyVersion],
        [group: 'org.glassfish.jersey.core', name: 'jersey-common', version: jerseyVersion],
        [group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: jerseyVersion],
        [group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion],
        [group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion],
        [group: 'org.glassfish.jersey.ext', name: 'jersey-bean-validation', version: jerseyVersion],


        [group: 'org.eclipse.jetty', name: 'jetty-server', version: jettyVersion],
        [group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion],
        [group: 'org.eclipse.jetty', name: 'jetty-webapp', version: jettyVersion],
        [group: 'org.eclipse.jetty', name: 'jetty-servlets', version: jettyVersion],

        [group: 'log4j', name: 'log4j', version: log4jVersion],

        [group: 'commons-configuration', name: 'commons-configuration', version: '1.10'],

        [group: 'com.google.guava', name: 'guava', version: guavaVersion],
        [group: 'commons-io', name: 'commons-io', version: 2.4],

        [group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion],

        //spring
        [group: 'org.springframework', name: 'spring-aop', version: springVersion],
        [group: 'org.springframework', name: 'spring-web', version: springVersion],
        [group: 'org.springframework', name: 'spring-core', version: springVersion],
        [group: 'org.springframework', name: 'spring-orm', version: springVersion],
        [group: 'org.springframework', name: 'spring-context-support', version: springVersion],

        [group: 'org.hibernate', name: 'hibernate-entitymanager', version: hibernateVersion],

        //mysql
        [group: 'com.hynnet', name: 'sqljdbc4-chs', version: '4.0.2206.100'],

        [group: 'com.mchange', name: 'c3p0', version: '0.9.5.1'],

        [group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.5.4'],

    )

    testCompile (
            [group: 'junit', name: 'junit', version: '4.11'],
            [group: 'org.assertj', name: 'assertj-core', version: '3.0.0']
    )
}

idea {
    project {
        languageLevel = '1.8'
        jdkName = '1.8'

        ipr {
            withXml { provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}

apply plugin: 'org.flywaydb.flyway'

ext {
    dbUrl = System.getProperty('dbUrl')
    if (dbUrl == null) {
        dbUrl = "jdbc:mysql://localhost:3306/mines?useUnicode=yes&characterEncoding=UTF-8"
    }

    dbUser = System.getProperty('dbUser')
    if (dbUser == null) {
        dbUser = "root"
    }

    dbPwd = System.getProperty('dbPwd')
    if (dbPwd == null) {
        dbPwd = ""
    }
}

flyway {
    url = "$dbUrl"
    initOnMigrate = true
    user = "$dbUser"
    password = "$dbPwd"
    initVersion = 0
    outOfOrder = true
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

mainClassName = "com.thoughtworks.solomonsmines.SolomonsMinesServerLauncher"

shadowJar {
    mergeServiceFiles('META-INF/spring.*')
    mergeServiceFiles('META-INF/services/*')
}

war {
    baseName = "solomonsmines"
    manifest {
        attributes "Implementation-Title": "Solomonsmines"
    }
}

ext {
    environment = System.getProperty("env")

    if (environment == null) {
        def osName = System.getProperty("os.name")
        if (osName != null && osName.toLowerCase().contains("windows")) {
            environment = "dev_win"
        } else {
            environment = "dev"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources", "src/main/environment/$environment"]
        }
    }
}
